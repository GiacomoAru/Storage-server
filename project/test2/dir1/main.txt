import java.io.*;
import java.util.*;

public class Main {
    public static void main(String[] Args){
        RisolviEx r = new RisolviEx("D:\\jack\\jack-\\VirtualBox ide\\Hacka\\input");
        r.start();
    }

    public static class RisolviEx{
        private int nNavicelle;
        private int nOrdini;
        private int budgetI;
        private int nPianeti;
        private int[][] distanze;

        private int[] uP;
        private int nPianetiUP;
        private int costoUP;

        private int[] posizNavicelle;
        private List<Ordine> ordini = new ArrayList<>();

        private String nomeOutput = "D:\\jack\\jack-\\VirtualBox ide\\Hacka\\secondoCoso.txt";
        private String inputFile;

        public RisolviEx(String inputFile){
            this.inputFile = inputFile;
        }

        private void costoMinimo(int pianetaP, int pianetaA){
            ArrayList<NodoD> U = new ArrayList<>(nPianeti);
            ArrayList<NodoD> nodi = new ArrayList<>(nPianeti);

            if(pianetaA == pianetaP){
                uP[0] = pianetaA;
                nPianetiUP = 1;
                costoUP = 0;
                return;
            }

            for(int i = 0; i<nPianeti; i++){
                NodoD dummy = new NodoD(i);
                nodi.add(dummy);
                U.add(dummy);

                if(dummy.nomePianeta == pianetaP){
                    dummy.pot = 0;
                    dummy.pred = 0;
                }
            }

            U.sort(null);
            while(!U.isEmpty()){

                NodoD dummy = U.get(0);
                U.remove(dummy);
                //System.out.println(dummy.nomePianeta + " " + dummy.pot + " " + dummy.pred);

                for(int j = 0; j<nPianeti; j++){

                    if(distanze[dummy.nomePianeta][j] >= 0) {
                        NodoD nd = nodi.get(j);
                        if (nd.pot > nodi.get(dummy.nomePianeta).pot + distanze[dummy.nomePianeta][j]) {
                            nd.pred = dummy.nomePianeta;
                            nd.pot = nodi.get(dummy.nomePianeta).pot + distanze[dummy.nomePianeta][j];
                        }
                    }
                }
                U.sort(null);
            }

            uP = new int[nPianeti];
            nPianetiUP = 0;
            int pre = pianetaA;
            System.out.println(pre);
            while(pre != pianetaP){
                uP[nPianetiUP] = pre;
                nPianetiUP++;

                pre = nodi.get(pre).pred;
                System.out.println(pre);
            }
            uP[nPianetiUP] = pre;
            nPianetiUP++;
            costoUP = nodi.get(pianetaA).pot;
            //fine???
        }
        public void start(){
            try(BufferedInputStream text = new BufferedInputStream(new FileInputStream(inputFile));
                BufferedOutputStream out = new BufferedOutputStream(new FileOutputStream(nomeOutput))) {

                Scanner s = new Scanner(text);


                String letto;
                nNavicelle = s.nextInt();
                nOrdini = s.nextInt();
                budgetI = s.nextInt();
                nPianeti = s.nextInt();

                distanze = new int[nPianeti][nPianeti];

                for(int i = 0; i<nOrdini; i++){
                    ordini.add(new Ordine(s.nextInt(), s.nextInt(), s.nextInt(), s.nextInt()));
                }
                posizNavicelle = new int[nNavicelle];
                for(int i = 0; i<nNavicelle; i++){
                    posizNavicelle[i] = 0;
                }
                for(int i = 0; i<nPianeti; i++){
                    for(int j = 0; j<nPianeti; j++) distanze[i][j] = -1;
                }int k = 0;
                try{

                while(s.hasNextLine()){
                    k++;
                    int a = s.nextInt();
                    int b = s.nextInt();
                    int c = s.nextInt();

                    if(a < 20000 && b < 20000) distanze[a][b] = c;
                    if(a < 20000 && b < 20000) distanze[b][a] = c;
                }}catch(Exception ee){ee.printStackTrace();System.err.println(k);}

                double[] tempoNav = new double[nNavicelle];
                int prime = 0;
                for(int i = 0; i<nNavicelle; i++) tempoNav[i] = 0;

                ordini.sort(null);
                for (Ordine o: ordini) {
                    int inizPrecNav = -1;
                    int idNav = -1;

                    if(prime < 10){

                        costoMinimo(posizNavicelle[prime], o.pianetaConsegna);
                        idNav = prime;
                        tempoNav[prime] += (double) costoUP * 0.5;

                        prime++;
                    }
                    else{
                        double min = Double.MAX_VALUE;
                        double minPrec = Double.MAX_VALUE;
                        int navicellola = -1;
                        int nv2 = -1;
                        for(int l = 0; l < nNavicelle; l++){
                            if(tempoNav[l] < min){ minPrec = min; nv2 = navicellola; min  = tempoNav[l]; navicellola = l;}
                        }


                        costoMinimo(posizNavicelle[navicellola], o.pianetaConsegna);

                        int[] upprec = uP.clone();
                        int nPianetiP = nPianetiUP;
                        int costoprec = costoUP;

                        if(nv2 >= 0) costoMinimo(posizNavicelle[nv2], o.pianetaConsegna);

                        if(nv2 >= 0 && costoprec < costoUP){
                            uP = upprec.clone();
                            nPianetiUP = nPianetiP;
                            costoUP = costoprec;
                            navicellola = nv2;
                        }
                        idNav = navicellola;
                        tempoNav[navicellola] += (double) costoUP * 0.5;
                    }


                    posizNavicelle[idNav] = o.pianetaConsegna;

                    String scrivi = idNav + " " + o.id;
                    out.write(scrivi.getBytes());
                    for(int j = --nPianetiUP; j>= 0; j--){
                        scrivi = " " + uP[j];
                        out.write(scrivi.getBytes());
                    }
                    out.write("\n".getBytes());
                }

            }catch(Exception e){e.printStackTrace();}
        }
    }

    public static class NodoD implements Comparable<NodoD> {
        int nomePianeta;
        int pot = Integer.MAX_VALUE;
        int pred = -1;

        public NodoD(int nomePianeta){this.nomePianeta = nomePianeta;}

        @Override
        public int compareTo(NodoD o) {
            return pot - o.pot;
        }
    }
    public static class Ordine implements Comparable<Ordine>{
        int id;
        int pianetaConsegna;
        int tMax;
        int ricavo;
        public Ordine(int id, int pc, int tm, int r){
            this.id = id;
            pianetaConsegna = pc;
            tMax = tm;
            ricavo = r;
        }

        @Override
        public int compareTo(Ordine o) {
            return tMax - o.tMax;
        }
    }
}

